name: Build, Test and Deploy the Hosted Widgets - Reusable workflow

on:
  workflow_call:
    inputs:
      ENV_NAME:
        required: true
        type: string
      REACT_APP_ENV_NAME:
        required: true
        type: string
      DEPLOY_TO_FLEEK:
        required: true
        type: boolean
      REACT_APP_RELEASE_TAG:
        required: false
        type: string
      REACT_APP_RELEASE_NAME:
        required: false
        type: string
      REACT_APP_META_TX_API_KEY_MAP:
        required: true
        type: string
      REACT_APP_META_TX_API_IDS_MAP:
        required: true
        type: string
    secrets:
      FLEEK_API_KEY:
        required: false
      REACT_APP_INFURA_IPFS_PROJECT_ID:
        required: false
      REACT_APP_INFURA_IPFS_PROJECT_SECRET:
        required: false
      REACT_APP_WALLET_CONNECT_PROJECT_ID:
        required: true
    outputs:
      JOB_LINT:
        value: ${{ jobs.build-test-deploy.outputs.jobLint }}
      JOB_BUILD:
        value: ${{ jobs.build-test-deploy.outputs.jobBuild }}
      DEPLOY_URL:
        value: ${{ jobs.build-test-deploy.outputs.deployUrl }}

jobs:
  build-test-deploy:
    name: Build, Test and Deploy the Hosted Widgets
    runs-on: ubuntu-latest
    env:
      REACT_APP_ENV_NAME: ${{ inputs.REACT_APP_ENV_NAME }}
      REACT_APP_RELEASE_TAG: ${{ inputs.REACT_APP_RELEASE_TAG }}
      REACT_APP_RELEASE_NAME: ${{ inputs.REACT_APP_RELEASE_NAME }}
      REACT_APP_INFURA_IPFS_PROJECT_ID: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_ID }}
      REACT_APP_INFURA_IPFS_PROJECT_SECRET: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_SECRET }}
      REACT_APP_WALLET_CONNECT_PROJECT_ID: ${{ secrets.REACT_APP_WALLET_CONNECT_PROJECT_ID }}
      REACT_APP_META_TX_API_KEY_MAP: ${{ inputs.REACT_APP_META_TX_API_KEY_MAP }}
      REACT_APP_META_TX_API_IDS_MAP: ${{ inputs.REACT_APP_META_TX_API_IDS_MAP }}
      REACT_APP_DEFAULT_DISPUTE_PERIOD_DAYS: "30"
      REACT_APP_DEFAULT_RESOLUTION_PERIOD_DAYS: "15"
      REACT_APP_CONTACT_SELLER_FOR_EXCHANGE_TESTING: "https://interface-test.on.fleek.co/#/chat/{id}"
      REACT_APP_CONTACT_SELLER_FOR_EXCHANGE_STAGING: "https://interface-staging.on.fleek.co/#/chat/{id}"
      REACT_APP_CONTACT_SELLER_FOR_EXCHANGE_PRODUCTION: "https://bosonapp.io/#/chat/{id}"
      REACT_APP_RAISE_DISPUTE_FOR_EXCHANGE_TESTING: "https://drcenter-test.on.fleek.co/#/exchange/{id}/raise-dispute"
      REACT_APP_RAISE_DISPUTE_FOR_EXCHANGE_STAGING: "https://drcenter-staging.on.fleek.co/#/exchange/{id}/raise-dispute"
      REACT_APP_RAISE_DISPUTE_FOR_EXCHANGE_PRODUCTION: "https://disputes.bosonprotocol.io/#/exchange/{id}/raise-dispute"
      REACT_APP_IPFS_GATEWAY: "https://bosonprotocol.infura-ipfs.io/ipfs"
      REACT_APP_BUYER_SELLER_AGREEMENT_TEMPLATE: "ipfs://QmaNj7vGuCEvaM5vyucp5z1S9VprMnZWmVxYGn6FHhgePF"
      REACT_APP_RNFT_LICENSE_TEMPLATE: "ipfs://QmdN6tCBkiGiCyr7xEfsEysoYrdkacdU3P2mEdVC5y4nF2"
      REACT_APP_FAIR_EXCHANGE_POLICY_RULES: "ipfs://QmbVmAspK2wi6Xrm6yB75TLqgfv9PAVv3kWxdsyQpEm79D"
    outputs:
      jobLint: ${{ steps.lint.outputs.pass }}
      jobBuild: ${{ steps.build.outputs.pass }}
      deployUrl: ${{ steps.deploy.outputs.deployUrl }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: "17"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - run: npm ci
      - run: npm run prettier
      - run: npm run lint
      - id: lint
        run: echo "::set-output name=pass::success"
      - run: npm run build
      - id: build
        run: echo "::set-output name=pass::success"
      - name: (if 'staging' env) Copy contents from .fleek_staging.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'staging' }}
        run: mv .fleek_staging.json .fleek.json
      - name: (if 'production' env) Copy contents from .fleek_production.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'production' }}
        run: mv .fleek_production.json .fleek.json
      - name: Deploy via fleek
        if: ${{ inputs.DEPLOY_TO_FLEEK }}
        id: deploy
        run: npx @fleekhq/fleek-cli site:deploy
        env:
          FLEEK_API_KEY: ${{ secrets.FLEEK_API_KEY }}
